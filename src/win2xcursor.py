import tomllib
import os
import argparse
import subprocess
import logging
from cursorgen import cursorfile_from_ani

logging.basicConfig(
    level=logging.INFO,
    format="%(levelname)s - %(message)s",
)

# Argument parsing
parser = argparse.ArgumentParser(
    prog="win2xcursor",
    description="Python script to transform .ani files into xcursors",
    epilog="This script expects [path]/[theme] to be an existing directory with a config.toml, and your ani files to be stored in [path]/[theme]/ani/",
)

parser.add_argument(
    "--path",
    help="Path base where the new cursor will reside. Defaults to ~/.local/share/icons",
    type=str,
    default=os.path.expandvars("$HOME/.local/share/icons"),
)

parser.add_argument(
    "--theme", help="Name to use for your new cursor.", type=str, required=True
)

args = parser.parse_args()


# Read and parse config file
path = f"{args.path}/{args.theme}"
with open(f"{path}/config.toml", "rb") as f:
    config = tomllib.load(f)

if not config.get("cursor"):
    logging.error(
        f"No cursors specified in {path}/config.toml, exiting install script..."
    )
    exit(-1)

for cursor in config["cursor"][:]:
    if (
        not cursor.get("name")
        or not cursor.get("file")
        or cursor.get("aliases", None) is None
    ):
        logging.error(f"Missing property on cursor {cursor}")
        logging.error("expected: [[cursor]]\nfile = ...\nname = ...\naliases = [...]")
        logging.error(
            "Please refer to the config.toml template to see how to fill these values"
        )
        exit(-1)
    if not os.path.exists(f"{path}/ani/{cursor['file']}"):
        logging.info(
            f"Could not find file {path}/{cursor['file']}, discarding from script"
        )
        config["cursor"].remove(cursor)


# =========================================================================== #
# NOTE: xcursorfiles    contains all .cursor files generated by the script    #
#       frames          contains PNG files extracted from all .ani            #
#       cursors         contains the final cursors generated via xcursorgen   #
# =========================================================================== #
# You can delete the xcursorfiles and frames directories after running the    #
# script, I'll leave them there so the process is understood a bit better     #
# and to manually replicate part of the process if the script fails.          #
# =========================================================================== #
os.makedirs(f"{path}/xcursorfiles", exist_ok=True)
os.makedirs(f"{path}/frames", exist_ok=True)
os.makedirs(f"{path}/cursors", exist_ok=True)


for cursor in config["cursor"]:
    cpath = cursorfile_from_ani(cursor["file"], path)

    # create the cursor with xcursorgen
    subprocess.run(
        [
            "xcursorgen",
            cpath,
            f"{path}/cursors/{cursor['name']}",
        ],
        check=True,
        cwd=path,
    )

    # create all defined aliases
    for alias in cursor["aliases"]:
        subprocess.run(
            [
                "ln",
                "-s",
                f"{path}/cursors/{cursor['name']}",
                f"{path}/cursors/{alias}",
            ],
            check=True,
            cwd=path,
        )

    # finally, create the index.theme
    with open(f"{path}/index.theme", "w") as f:
        f.write("[Icon Theme]\n")
        f.write(f"Name={args.theme}\n")
        f.write("Inherits=breeze_cursors\n")  # defaults for missing icons
