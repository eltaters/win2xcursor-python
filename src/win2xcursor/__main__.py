import argparse
import logging
import os
import subprocess
import sys
import textwrap
import tomllib

from . import __version__
from .cursorgen import cursorfile_from_ani

logger = logging.getLogger(__package__)


def main() -> int:
    handler = logging.StreamHandler(stream=sys.stderr)
    formatter = logging.Formatter(fmt="%(message)s")
    handler.setFormatter(formatter)

    logger.addHandler(handler)
    logger.setLevel(logging.INFO)

    # Argument parsing
    parser = argparse.ArgumentParser(
        prog="win2xcursor",
        description="Python script to transform .ani files into xcursors",
        epilog="This script expects [path]/[theme] to be an existing directory with a config.toml, and your ani files to be stored in [path]/[theme]/ani/",
    )
    parser.add_argument(
        "--path",
        help="Path base where the new cursor will reside. Defaults to ~/.local/share/icons",
        type=str,
        default=os.path.expandvars("$HOME/.local/share/icons"),
    )
    parser.add_argument(
        "--theme",
        help="Name to use for your new cursor.",
        type=str,
        required=True,
    )
    parser.add_argument(
        "-V",
        "--version",
        action="version",
        version=f"{__package__} {__version__}",
    )
    args = parser.parse_args()

    # Read and parse config file
    path = f"{args.path}/{args.theme}"
    with open(f"{path}/config.toml", "rb") as f:
        config = tomllib.load(f)

    if not config.get("cursor"):
        logger.error(
            f"No cursors specified in {path}/config.toml, exiting install script..."
        )
        return 1

    scale = max(1, int(config.get("scale", 1)))

    for cursor in config["cursor"][:]:
        if (
            not cursor.get("name")
            or not cursor.get("file")
            or cursor.get("aliases", None) is None
        ):
            logger.error(f"Missing property on cursor {cursor}")
            logger.error(
                "expected: [[cursor]]\nfile = ...\nname = ...\naliases = [...]"
            )
            logger.error(
                "Please refer to the config.toml template to see how to fill these values"
            )
            return 1
        if not os.path.exists(f"{path}/ani/{cursor['file']}"):
            logger.info(
                f"Could not find file {path}/{cursor['file']}, discarding from script"
            )
            config["cursor"].remove(cursor)

    # ======================================================================= #
    # xcursorfiles    contains all .cursor files generated by the script      #
    # frames          contains PNG files extracted from all .ani              #
    # cursors         contains the final cursors generated via xcursorgen     #
    # ======================================================================= #
    # You can delete the xcursorfiles and frames directories after running    #
    # the script, I'll leave them there so the process is understood a bit    #
    # better and to manually handle part of the process if the script fails   #
    # ======================================================================= #
    os.makedirs(f"{path}/xcursorfiles", exist_ok=True)
    os.makedirs(f"{path}/frames", exist_ok=True)
    os.makedirs(f"{path}/cursors", exist_ok=True)

    # Main script

    print("=" * 80, file=sys.stderr)
    print(" " * 28 + " WIN2XCUR PYTHON SCRIPT " + " " * 28, file=sys.stderr)
    print("=" * 80, file=sys.stderr)
    for cursor in config["cursor"]:
        logger.info(f"Creating .cursor file for {cursor['file']}")
        cpath = cursorfile_from_ani(cursor["file"], path, scale)

        # create the cursor with xcursorgen
        logger.info(f"Creating cursor: {cursor['name']}")
        subprocess.run(
            [
                "xcursorgen",
                cpath,
                f"{path}/cursors/{cursor['name']}",
            ],
            check=True,
            cwd=path,
        )

        # create all defined aliases
        logger.info(
            f"Creating aliases: {textwrap.fill(', '.join(cursor['aliases']), width=62, subsequent_indent=' ' * 18)}\n"
        )
        for alias in cursor["aliases"]:
            subprocess.run(
                [
                    "ln",
                    "-s",
                    f"{path}/cursors/{cursor['name']}",
                    f"{path}/cursors/{alias}",
                ],
                check=True,
                cwd=path,
            )
        print("-" * 80, file=sys.stderr, end="\n\n")

    # finally, create the index.theme
    logger.info("Writing index.theme")
    with open(f"{path}/index.theme", "w") as f:
        f.write("[Icon Theme]\n")
        f.write(f"Name={args.theme}\n")
        f.write("Inherits=breeze_cursors\n")  # defaults for missing icons

    logger.info("Finished creating cursor!ðŸš€ðŸš€")
    return 0


if __name__ == "__main__":
    sys.exit(main())
